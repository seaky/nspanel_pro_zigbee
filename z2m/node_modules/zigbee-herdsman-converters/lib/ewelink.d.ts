import { Fz, KeyValueAny, ModernExtend, Tz } from './types';
export declare const ewelinkToZigbee: {
    motor_direction: {
        key: string[];
        convertSet: (entity: import("zigbee-herdsman/dist/controller/model").Group | import("zigbee-herdsman/dist/controller/model").Endpoint, key: string, value: unknown, meta: Tz.Meta) => Promise<{
            state: {
                motor_direction: unknown;
            };
        }>;
    };
};
export declare const ewelinkFromZigbee: {
    motor_direction: {
        cluster: string;
        type: string[];
        options: import("./exposes").Binary[];
        convert: (model: import("./types").Definition, msg: Fz.Message, publish: import("./types").Publish, options: import("./types").KeyValue, meta: Fz.Meta) => KeyValueAny;
    };
};
export declare const ewelinkModernExtend: {
    ewelinkAction: () => ModernExtend;
    ewelinkBattery: () => ModernExtend;
    ewelinkMotorReverse: () => ModernExtend;
    ewelinkMotorClbByPosition: (clusterName: string, writeCommand: string) => ModernExtend;
    ewelinkMotorMode: (clusterName: string, writeCommand: string) => ModernExtend;
    ewelinkReportMotorInfo: (clusterName: string) => ModernExtend;
    ewelinkMotorSpeed: (clusterName: string, writeCommand: string, min: number, max: number) => ModernExtend;
};
export { ewelinkModernExtend as modernExtend };
//# sourceMappingURL=ewelink.d.ts.map